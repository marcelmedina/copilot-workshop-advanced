{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "GitHub Copilot Advanced Workshop",
  "steps": [
    {
      "title": "Welcome to Advanced Copilot Workshop",
      "description": "## Welcome! üöÄ\n\nIn this tour you'll learn advanced GitHub Copilot features including:\n\n- **Instructions**: Custom AI guidelines for your workspace\n- **Prompts**: Structured prompting techniques  \n- **Chat Modes**: Advanced chat interactions\n\nLet's start by exploring Copilot Instructions!"
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "What are Copilot Instructions?",
      "description": "## Copilot Instructions Overview\n\nCopilot Instructions are markdown files that contain guidelines, coding standards, and preferences that GitHub Copilot uses when generating code suggestions.\n\n**Key Benefits:**\n- Ensure consistent code quality\n- Enforce project-specific requirements\n- Customize AI behavior for your codebase\n\nRead through this section to understand the fundamentals.",
      "line": 7
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Understanding the Structure",
      "description": "## File Structure Components\n\nCopilot Instructions files have three key parts:\n\n1. **Frontmatter** - YAML metadata (description, file patterns)\n2. **Structured sections** - Organized guidelines by topic\n3. **Clear rules** - Specific, actionable instructions\n\nThis structure helps Copilot understand and apply your preferences effectively.",
      "line": 12
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Create the Directory Structure",
      "description": "## Setting Up Your Instructions\n\n**Action Required:** Follow the commands shown here to create the proper directory structure.\n\n**For this workshop:** Create the `.github/instructions` directory.\n\nüìù **Note:** GitHub Copilot looks for instructions in `.github/instructions/` by default.",
      "line": 23
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Create Your Instructions File",
      "description": "## Hands-On Exercise! üîß\n\n**Let's create your first instructions file:**\n\n1. Right-click in the `.github/instructions` folder\n2. Select \"New File\"\n3. Name it `csharp.instructions.md`\n",
      "line": 35
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "The Template Content",
      "description": "## Copy This Template\n\nThis is the enhanced template you should copy into your `csharp.instructions.md` file.\n\n**Important sections:**\n- **Frontmatter**: `applyTo: '**/*.cs'` targets all C# files\n- **C# Instructions**: Latest C# version preferences and commenting\n- **General Instructions**: Code quality and documentation guidelines\n- **Testing Guidelines**: Comprehensive testing requirements including:\n  - Test cases for all arithmetic operations\n  - Edge cases like division by zero\n  - Exception handling verification\n  - Meaningful test method names\n- **Documentation**: File headers and XML comments\n\nAfter copying, save the file and continue to the next step.",
      "line": 54
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Ask Copilot",
      "description": "## Ask Copilot to find the new Instructions\n\nAsk Copilot in Agent mode: \"can you find any instructions in this repo?\"",
      "line": 83
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Testing Your Instructions",
      "description": "## Reload the instructions! ‚úÖ\n\n**Action Time:**\n\n1. **Open a new Chat Editor** (Ctrl+N or Cmd+N) to load your new instructions",
      "line": 87
    },
    {
      "file": "dotnet-console/CalculatorApp/Program.cs",
      "title": "Test Instructions in Action",
      "description": "## See Instructions at Work! üéØ\n\nNow let's test the existing instructions with the calculator project:\n\n**Try these Copilot Chat commands:**\n- \"Make it compliant to the instructions in this repo\"\n- \"Write a unit test for the Add method\"\n- \"Create error handling for division by zero\"\n- \"Add documentation to the Calculator class\"\n- \"Write XML documentation for calculator methods\"\n- \"Suggest improvements following C# best practices\"\n\n**What to notice:**\n- Copilot uses latest C# features (from instructions)\n- Documentation includes XML comments (as required)\n- Error handling follows the guidelines\n- Code follows the established patterns\n\n**Amazing!** You can see how Copilot Instructions influence real code generation! üéâ",
      "line": 1
    },
    {
      "title": "Workshop Complete!",
      "description": "## üéâ Congratulations!\n\nYou've successfully completed the Core Instructions workshop!\n\n**What you've accomplished:**\n- ‚úÖ **Learned** what Copilot Instructions are and their benefits\n- ‚úÖ **Created** a C# instructions file with proper structure\n- ‚úÖ **Understood** how frontmatter and file patterns work\n- ‚úÖ **Applied** instructions to your calculator project\n- ‚úÖ **Tested** that your instructions work with Copilot\n\n**Your instructions now include:**\n- C# 13 feature usage\n- Documentation requirements\n- Error handling guidelines\n- Testing best practices\n\n**Next Steps:**\n- **Experiment** with different instruction styles\n- **Create** project-specific instruction files\n- **Share** instruction files with your team\n- **Explore** other templates in the awesome-copilot repository\n\n**Resources:**\n- [GitHub Copilot Documentation](https://docs.github.com/en/copilot)\n- [Awesome Copilot Repository](https://github.com/github/awesome-copilot)\n\nGreat job! üöÄ"
    }
  ],
  "ref": "main"
}