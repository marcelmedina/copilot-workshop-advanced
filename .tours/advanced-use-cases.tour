{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "GitHub Copilot Advanced Workshop",
  "steps": [
    {
      "title": "Welcome to Advanced Copilot Workshop",
      "description": "## Welcome! üöÄ\n\nIn this tour you'll learn advanced GitHub Copilot features including:\n\n- **Instructions**: Custom AI guidelines for your workspace\n- **Prompts**: Structured prompting techniques  \n- **Chat Modes**: Advanced chat interactions\n\nLet's start by exploring Copilot Instructions!"
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "What are Copilot Instructions?",
      "description": "## Copilot Instructions Overview\n\nCopilot Instructions are markdown files that contain guidelines, coding standards, and preferences that GitHub Copilot uses when generating code suggestions.\n\n**Key Benefits:**\n- Ensure consistent code quality\n- Enforce project-specific requirements\n- Customize AI behavior for your codebase\n\nRead through this section to understand the fundamentals.",
      "line": 7
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Understanding the Structure",
      "description": "## File Structure Components\n\nCopilot Instructions files have three key parts:\n\n1. **Frontmatter** - YAML metadata (description, file patterns)\n2. **Structured sections** - Organized guidelines by topic\n3. **Clear rules** - Specific, actionable instructions\n\nThis structure helps Copilot understand and apply your preferences effectively.",
      "line": 12
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Create the Directory Structure",
      "description": "## Setting Up Your Instructions\n\n**Action Required:** Follow the commands shown here to create the proper directory structure.\n\n**For this workshop:** Create the `.github/instructions` directory.\n\nüìù **Note:** GitHub Copilot looks for instructions in `.github/instructions/` by default.",
      "line": 23
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Create Your Instructions File",
      "description": "## Hands-On Exercise! üîß\n\n**Let's create your first instructions file:**\n\n1. Right-click in the `.github/instructions` folder\n2. Select \"New File\"\n3. Name it `csharp.instructions.md`\n",
      "line": 35
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "The Template Content",
      "description": "## Copy This Template\n\nThis is the enhanced template you should copy into your `csharp.instructions.md` file.\n\n**Important sections:**\n- **Frontmatter**: `applyTo: '**/*.cs'` targets all C# files\n- **C# Instructions**: Latest C# version preferences and commenting\n- **General Instructions**: Code quality and documentation guidelines\n- **Testing Guidelines**: Comprehensive testing requirements including:\n  - Test cases for all arithmetic operations\n  - Edge cases like division by zero\n  - Exception handling verification\n  - Meaningful test method names\n- **Documentation**: File headers and XML comments\n\nAfter copying, save the file and continue to the next step.",
      "line": 54
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Ask Copilot",
      "description": "## Ask Copilot to find the new Instructions\n\nAsk Copilot in Agent mode: \"can you find any instructions in this repo?\"",
      "line": 83
    },
    {
      "file": "instructions/2. Core Instructions.md",
      "title": "Testing Your Instructions",
      "description": "## Reload the instructions! ‚úÖ\n\n**Action Time:**\n\n1. **Open a new Chat Editor** (Ctrl+N or Cmd+N) to load your new instructions",
      "line": 87
    },
    {
      "file": "dotnet-console/CalculatorApp/Program.cs",
      "title": "Test Instructions in Action",
      "description": "## See Instructions at Work! üéØ\n\nNow let's test the existing instructions with the calculator project. Select both `Program.cs` and `Calculator.cs` as part of the context.\n\n**Try this Copilot Chat command:**\n- \"Make it compliant to the instructions in this repo\"\n\n**Try these Copilot Chat commands afterwards:**\n- \"Write a unit test for the Add method\"\n- \"Create error handling for division by zero\"\n- \"Add documentation to the Calculator class\"\n- \"Write XML documentation for calculator methods\"\n- \"Suggest improvements following C# best practices\"\n\n**What to notice:**\n- Copilot uses latest C# features (from instructions)\n- Documentation includes XML comments (as required)\n- Error handling follows the guidelines\n- Code follows the established patterns\n\n**Amazing!** You can see how Copilot Instructions influence real code generation! üéâ",
      "line": 1
    },
    {
      "title": "Instructions Workshop Complete!",
      "description": "## üéâ Congratulations!\n\nYou've successfully completed the Core Instructions workshop!\n\n**What you've accomplished:**\n- ‚úÖ **Learned** what Copilot Instructions are and their benefits\n- ‚úÖ **Created** a C# instructions file with proper structure\n- ‚úÖ **Understood** how frontmatter and file patterns work\n- ‚úÖ **Applied** instructions to your calculator project\n- ‚úÖ **Tested** that your instructions work with Copilot\n\n**Your instructions now include:**\n- C# 13 feature usage\n- Documentation requirements\n- Error handling guidelines\n- Testing best practices\n\n**Next:** Let's move on to Core Prompts! üöÄ"
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "Welcome to Core Prompts!",
      "description": "## Core Prompts Workshop üéØ\n\nIn this section you'll learn about GitHub Copilot Prompts - structured instructions that define how GitHub Copilot should behave.\n\n**What you'll learn:**\n- **Prompt Structure**: Frontmatter, Mission, Directives, User Preferences, and Execution sections\n- **Creating Effective Prompts**: How to write clear, actionable instructions\n- **Validation Techniques**: Testing prompt effectiveness\n- **Real Implementation**: See prompts in action\n\nLet's dive in!",
      "line": 1
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "What are Copilot Prompts?",
      "description": "## Understanding Copilot Prompts\n\nCopilot Prompts are markdown files with frontmatter that define Copilot with specific roles, missions, and behaviors.\n\n**Key Benefits:**\n- Create consistent AI assistants\n- Follow explicit instructions\n- Produce structured outputs\n- Reliable behavior patterns\n\nThey're different from Instructions - they create specialized Copilot agents for specific tasks!",
      "line": 7
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "Understanding Prompt Structure",
      "description": "## The Two Key Components\n\nA well-crafted Copilot Prompt includes:\n\n1. **Frontmatter** - YAML metadata (title, description, mode)\n2. **Prompt Content** - The main body containing:\n   - Mission (clear role and purpose)\n   - Directives (explicit, actionable instructions)\n   - User Preferences (configurable options)\n   - Execution (step-by-step guidance and examples)\n\nThis structure ensures consistent, reliable behavior.",
      "line": 12
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "Create Your First Prompt",
      "description": "## EditorConfig Expert Example\n\nWe'll create an EditorConfig Expert prompt to demonstrate the complete structure.\n\n**This agent will:**\n- Analyze project structure\n- Generate comprehensive .editorconfig files\n- Integrate with build processes\n- Provide detailed explanations\n\nA perfect example of a specialized Copilot agent!",
      "line": 20
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "Setup Prompts Directory",
      "description": "## Directory Structure Setup\n\n**Action Required:** Follow these commands to create the prompts directory structure.\n\n**For this workshop:** Create the `.github/prompts` directory.\n\nüìù **Note:** This is where you'll store all your custom Copilot Prompts for organized agent management.",
      "line": 29
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "Create the Prompt File",
      "description": "## Hands-On Exercise! üîß\n\n**Let's create your EditorConfig prompt:**\n\n1. Right-click in the `.github/prompts` folder\n2. Select \"New File\"\n3. Name it `editorconfig.prompt.md`\n\nThis will be your first prompt definition!",
      "line": 48
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "The Complete Prompt Template",
      "description": "## Copy This Prompt Content\n\nThis is the complete EditorConfig Expert prompt template.\n\n**Key sections to notice:**\n- **Frontmatter**: YAML metadata defining agent title, description, and mode\n- **Mission**: Clear role definition as EditorConfig Expert with specific objectives\n- **Directives**: 8 numbered, actionable instructions covering file analysis, rule enforcement, and output formatting\n- **User Preferences**: Configurable indentation settings (spaces vs tabs, size)\n- **Execution**: Step-by-step workflow and required output structure\n- **Output Examples**: Complete code blocks showing expected .editorconfig and .csproj formats\n\nCopy this entire template into your `editorconfig.prompt.md` file and save it.",
      "line": 66
    },
    {
      "file": "instructions/3. Core Prompt.md",
      "title": "Validate Your Prompt",
      "description": "## Testing Your Copilot Prompt! ‚úÖ\n\n**Now let's test the prompt:**\n\n1. Type `/editorconfig` in Copilot Chat\n2. Submit the prompt command\n3. Review the output quality\n\n**What to look for:**\n- Complete .editorconfig file generation\n- Project file integration\n- Detailed rule explanations",
      "line": 174
    },
    {
      "file": "dotnet-console/Calculator.Library/Calculator.Library.csproj",
      "title": "Project Integration Works",
      "description": "## Build Integration Success! üîß\n\nThe prompt also updated project files with enforcement properties:\n\n- `EnforceCodeStyleInBuild`: Validates during build\n- `AnalysisLevel`: Uses latest analysis rules\n\nThis ensures the .editorconfig rules are enforced at build time, not just in the editor!",
      "line": 8
    },
    {
      "title": "Core Prompts Workshop Complete!",
      "description": "## üéâ Outstanding Work!\n\nYou've successfully completed the Core Prompts workshop!\n\n**What you've accomplished:**\n- ‚úÖ **Learned** what Copilot Prompts are and their structure\n- ‚úÖ **Created** an EditorConfig Expert agent with frontmatter\n- ‚úÖ **Understood** Mission, Directives, and Execution components\n- ‚úÖ **Built** a working prompt that generates real code\n- ‚úÖ **Validated** that your prompt produces quality output\n- ‚úÖ **Integrated** prompt results with build processes\n\n**Your prompt agent now:**\n- Analyzes project structure automatically\n- Generates comprehensive .editorconfig files\n- Integrates with MSBuild for enforcement\n- Provides detailed explanations for every rule\n\n**Next Steps:**\n- **Create prompts for other domains** (code review, testing, docs)\n- **Experiment with different directive styles**\n- **Share prompts with your team** for consistency\n- **Build a library of specialized agents**\n\n**Resources:**\n- [GitHub Copilot Documentation](https://docs.github.com/en/copilot)\n- [Prompt Engineering Best Practices](https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api)\n- [EditorConfig Documentation](https://editorconfig.org/)\n\nYou're now a Copilot Prompts expert! üöÄ"
    }
  ],
  "ref": "main"
}